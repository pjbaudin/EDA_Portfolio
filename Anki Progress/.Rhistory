res <- dbSendQuery(con, "SELECT * FROM cards")
card <- dbFetch(res)
dbClearResult(res)
# Get the collection (decks) data
res <- dbSendQuery(con, "SELECT * from col")
col <- dbFetch(res)
dbClearResult(res)
# Get the revision log
res <- dbSendQuery(con, "SELECT * FROM revlog")
revlog = dbFetch(res)
dbClearResult(res)
res <- dbSendQuery(con, "SELECT * FROM notes")
notes <- dbFetch(res)
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
## Data Processing ####
# Reassign class on the card data and notes data
card$id <- as.numeric(card$id)
card$nid <- as.numeric(card$nid)
card$did <- as.numeric(card$did)
notes$id <- as.numeric(notes$id)
# Tidy the deck info from col data
# function to get name and id of the deck
deck <- fromJSON(txt = col$decks) %>%
unname() %>%
lapply(function(x) {
temp <- unlist(x)
data.frame(name = temp[names(temp) == "name"],
id = temp[names(temp) == "id"],
row.names = NULL)
}) %>%
bind_rows()
# Reclass deck
deck$name <- as.factor(deck$name)
deck$id <- as.numeric(deck$id)
# Mutate revlog id into timestamp and reclass
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl))
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
# leftjoin revlog with card to complete revlog info
revlog <- revlog %>%
left_join(card, by = ("id" = "cid"))
str(revlog)
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
head(revlog$cid)
filter(card, id == revlog$cid[1])
# Mutate revlog id into timestamp and reclass
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(!id)
# Mutate revlog id into timestamp and reclass
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(-id)
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
left_join(card, by = ("id" = "cid"))
str(revlog2)
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(-id)
str(revlog)
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
left_join(card, by = ("cid" = "id"))
?left_join
# Anki database
# Visualize progress and EDA ####
## Setup and data acquisition ####
# Set working directory
act_wd <- "C:/Users/pierr/Documents/GitHub/EDA_Portfolio/Anki Progress"
if (getwd() != act_wd) {
setwd(act_wd)
} else {
print("Already set!")
}
# Import copy of the collection.anki2 database
ankipath <- "C:/Users/pierr/AppData/Roaming/Anki2/User 1/collection.anki2"
if (file.info(ankipath)$mtime != file.info("collection.anki2")$mtime) {
file.copy(ankipath, act_wd)
print(file.info(ankipath)$mtime)
} else {
print("Backup file already set!")
}
# Setup packages
library(RSQLite)
library(DBI)
library(jsonlite)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
# Set up connection to Anki database
con <- dbConnect(SQLite(), dbname = "collection.anki2")
# Get the card data
res <- dbSendQuery(con, "SELECT * FROM cards")
card <- dbFetch(res)
dbClearResult(res)
# Get the collection (decks) data
res <- dbSendQuery(con, "SELECT * from col")
col <- dbFetch(res)
dbClearResult(res)
# Get the revision log
res <- dbSendQuery(con, "SELECT * FROM revlog")
revlog = dbFetch(res)
dbClearResult(res)
res <- dbSendQuery(con, "SELECT * FROM notes")
notes <- dbFetch(res)
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
## Data Processing ####
# Reassign class on the card data and notes data
card$id <- as.numeric(card$id)
card$nid <- as.numeric(card$nid)
card$did <- as.numeric(card$did)
notes$id <- as.numeric(notes$id)
# Tidy the deck info from col data
# function to get name and id of the deck
deck <- fromJSON(txt = col$decks) %>%
unname() %>%
lapply(function(x) {
temp <- unlist(x)
data.frame(name = temp[names(temp) == "name"],
id = temp[names(temp) == "id"],
row.names = NULL)
}) %>%
bind_rows()
# Reclass deck
deck$name <- as.factor(deck$name)
deck$id <- as.numeric(deck$id)
# Mutate revlog id into timestamp and reclass
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl))
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
semi_join(card, by = ("cid" = "id"))
str(revlog2)
card$id[1]
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
full_join(card, by = ("cid" = "id"))
str(revlog2)
revlog2 <- revlog %>%
right_join(card, by = ("cid" = "id"))
str(revlog2)
dim(revlog)
revlog2 <- revlog %>%
select(-id) %>%
right_join(card, by = ("cid" = "id"))
str(revlog2)
revlog2 <- revlog %>%
select(-id) %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
revlog2 <- revlog %>%
select(-id) %>%
left_join(card, by = ("id" = "cid"))
str(revlog2)
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
select(-id) %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
# Anki database
# Visualize progress and EDA ####
## Setup and data acquisition ####
# Set working directory
act_wd <- "C:/Users/pierr/Documents/GitHub/EDA_Portfolio/Anki Progress"
if (getwd() != act_wd) {
setwd(act_wd)
} else {
print("Already set!")
}
# Import copy of the collection.anki2 database
ankipath <- "C:/Users/pierr/AppData/Roaming/Anki2/User 1/collection.anki2"
if (file.info(ankipath)$mtime != file.info("collection.anki2")$mtime) {
file.copy(ankipath, act_wd)
print(file.info(ankipath)$mtime)
} else {
print("Backup file already set!")
}
# Setup packages
library(RSQLite)
library(DBI)
library(jsonlite)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
# Set up connection to Anki database
con <- dbConnect(SQLite(), dbname = "collection.anki2")
# Get the card data
res <- dbSendQuery(con, "SELECT * FROM cards")
card <- dbFetch(res)
dbClearResult(res)
# Get the collection (decks) data
res <- dbSendQuery(con, "SELECT * from col")
col <- dbFetch(res)
dbClearResult(res)
# Get the revision log
res <- dbSendQuery(con, "SELECT * FROM revlog")
revlog = dbFetch(res)
dbClearResult(res)
res <- dbSendQuery(con, "SELECT * FROM notes")
notes <- dbFetch(res)
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
## Data Processing ####
# Reassign class on the card data and notes data
card$id <- as.numeric(card$id)
card$nid <- as.numeric(card$nid)
card$did <- as.numeric(card$did)
notes$id <- as.numeric(notes$id)
# Tidy the deck info from col data
# function to get name and id of the deck
deck <- fromJSON(txt = col$decks) %>%
unname() %>%
lapply(function(x) {
temp <- unlist(x)
data.frame(name = temp[names(temp) == "name"],
id = temp[names(temp) == "id"],
row.names = NULL)
}) %>%
bind_rows()
# Reclass deck
deck$name <- as.factor(deck$name)
deck$id <- as.numeric(deck$id)
# Mutate revlog id into timestamp and reclass
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl))
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
# leftjoin revlog with card to complete revlog info
revlog2 <- revlog %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
table(revlog2$did)
table(as.factor(revlog2$did))
tail(revlog2$did)
str(card)
names(card$id)
names(card)
str(revlog)
summary(card$id)
summary(revlog$cid)
head(left_join(revlog, card, by = ("cid" = "id")))
head(left_join(revlog, card, by = ("id" = "id")))
head(left_join(revlog, card, by = ("id" = "cid")))
head(semi_join(revlog, card, by = ("cid" = "id")))
head(full_join(revlog, card, by = ("cid" = "id")))
head(full_join(revlog, card, by = "id"))
head(full_join(revlog, card, by = c("id" = "cid"))
)
str(card)
str(revlog)
filter(card, id = revlog$cid[1])
filter(card, id == revlog$cid[1])
filter(card, id == revlog$cid[10])
filter(revlog, cid == revlog$cid[10])
head(left_join(revlog[, "cid"], card, by = c("cid" = "id")))
head(left_join(revlog[, c("cid", "TimeStamp")], card, by = c("cid" = "id")))
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(-id)
head(left_join(revlog, card, by = c("cid" = "id")))
# Anki database
# Visualize progress and EDA ####
## Setup and data acquisition ####
# Set working directory
act_wd <- "C:/Users/pierr/Documents/GitHub/EDA_Portfolio/Anki Progress"
if (getwd() != act_wd) {
setwd(act_wd)
} else {
print("Already set!")
}
# Import copy of the collection.anki2 database
ankipath <- "C:/Users/pierr/AppData/Roaming/Anki2/User 1/collection.anki2"
if (file.info(ankipath)$mtime != file.info("collection.anki2")$mtime) {
file.copy(ankipath, act_wd)
print(file.info(ankipath)$mtime)
} else {
print("Backup file already set!")
}
# Setup packages
library(RSQLite)
library(DBI)
library(jsonlite)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
# Set up connection to Anki database
con <- dbConnect(SQLite(), dbname = "collection.anki2")
# Get the card data
res <- dbSendQuery(con, "SELECT * FROM cards")
card <- dbFetch(res)
dbClearResult(res)
# Get the collection (decks) data
res <- dbSendQuery(con, "SELECT * from col")
col <- dbFetch(res)
dbClearResult(res)
# Get the revision log
res <- dbSendQuery(con, "SELECT * FROM revlog")
revlog = dbFetch(res)
dbClearResult(res)
res <- dbSendQuery(con, "SELECT * FROM notes")
notes <- dbFetch(res)
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
## Data Processing ####
# Reassign class on the card data and notes data
card$id <- as.numeric(card$id)
card$nid <- as.numeric(card$nid)
card$did <- as.numeric(card$did)
notes$id <- as.numeric(notes$id)
# Tidy the deck info from col data
# function to get name and id of the deck
deck <- fromJSON(txt = col$decks) %>%
unname() %>%
lapply(function(x) {
temp <- unlist(x)
data.frame(name = temp[names(temp) == "name"],
id = temp[names(temp) == "id"],
row.names = NULL)
}) %>%
bind_rows()
# Reclass deck
deck$name <- as.factor(deck$name)
deck$id <- as.numeric(deck$id)
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
# leftjoin revlog with card to complete revlog info
# Mutate revlog id into timestamp and reclass
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(-id) %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(-id) %>%
head()
revlog2 <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(-id)
revlog2 <- revlog2 %>%
left_join(card, by = ("cid" = "id"))
str(revlog2)
# Anki database
# Visualize progress and EDA ####
## Setup and data acquisition ####
# Set working directory
act_wd <- "C:/Users/pierr/Documents/GitHub/EDA_Portfolio/Anki Progress"
if (getwd() != act_wd) {
setwd(act_wd)
} else {
print("Already set!")
}
# Import copy of the collection.anki2 database
ankipath <- "C:/Users/pierr/AppData/Roaming/Anki2/User 1/collection.anki2"
if (file.info(ankipath)$mtime != file.info("collection.anki2")$mtime) {
file.copy(ankipath, act_wd)
print(file.info(ankipath)$mtime)
} else {
print("Backup file already set!")
}
# Setup packages
library(RSQLite)
library(DBI)
library(jsonlite)
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
# Set up connection to Anki database
con <- dbConnect(SQLite(), dbname = "collection.anki2")
# Get the card data
res <- dbSendQuery(con, "SELECT * FROM cards")
card <- dbFetch(res)
dbClearResult(res)
# Get the collection (decks) data
res <- dbSendQuery(con, "SELECT * from col")
col <- dbFetch(res)
dbClearResult(res)
# Get the revision log
res <- dbSendQuery(con, "SELECT * FROM revlog")
revlog = dbFetch(res)
dbClearResult(res)
res <- dbSendQuery(con, "SELECT * FROM notes")
notes <- dbFetch(res)
dbClearResult(res)
# Disconnect from the database
dbDisconnect(con)
## Data Processing ####
# Reassign class on the card data and notes data
card$id <- as.numeric(card$id)
card$nid <- as.numeric(card$nid)
card$did <- as.numeric(card$did)
notes$id <- as.numeric(notes$id)
# Tidy the deck info from col data
# function to get name and id of the deck
deck <- fromJSON(txt = col$decks) %>%
unname() %>%
lapply(function(x) {
temp <- unlist(x)
data.frame(name = temp[names(temp) == "name"],
id = temp[names(temp) == "id"],
row.names = NULL)
}) %>%
bind_rows()
# Reclass deck
deck$name <- as.factor(deck$name)
deck$id <- as.numeric(deck$id)
# Mutate revlog id into timestamp and reclass
revlog <- revlog %>%
mutate(TimeStamp = as.POSIXct(as.numeric(id) / 1000, origin = "1970-01-01"),
id = as.numeric(id),
cid = as.numeric(cid),
ivl = as.numeric(ivl),
lastIvl = as.numeric(lastIvl)) %>%
select(-id)
# left_join card with deck to add deck names
card <- card %>%
left_join(deck, by = c("did" = "id")) %>%
left_join(notes[, c("id", "sfld")], by = c("nid" = "id"))
head(left_join(revlog[, c("cid", "TimeStamp")], card, by = c("cid" = "id")))
head(left_join(revlog, card, by = c("cid" = "id")))
revlog <- left_join(revlog, card, by = c("cid" = "id"))
str(revlog)
summary(revlog)
