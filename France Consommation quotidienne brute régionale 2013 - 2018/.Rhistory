percent_rank(x)
cume_dist(x)
ntile(x, 2)
summary(df$rm)
df %>%
mutate(bin = ntile(rm, round(max(df$rm)))) %>%
group_by(bin) %>%
summary()
df %>%
mutate(bin = ntile(rm, round(max(df$rm)))) %>%
group_by(bin) %>%
summarise_all(c("mean"))
df %>%
mutate(bin = ntile(rm, round(max(df$rm)))) %>%
group_by(bin) %>%
summarise_all(c("mean")) %>%
pairs()
?group_by_if
?group_by
library(quantmod)
source('~/.active-rstudio-document', echo=TRUE)
autoplot.zoo(BX)
autoplot.zoo(GE)
autoplot(GE)
plot.xts(GE)
str(GE)
autoplot.zoo(GE$GE.Adjusted)
?getSymbols
df <- getSymbols(stocklist)
class(df)
str(df)
df$BX
df[["BX"]]
source('~/.active-rstudio-document', echo=TRUE)
list2env()
ls
ls()
remove(df)
ls()
df <- merge(BX, HCP)
head(df)
df <- merge(stocklist)
?ls
str(BX)
ls(pattern = "xts")
ls(pattern = stocklist)
?mget
datalist <- mget(stocklist)
df <- merge(datalist)
df <- lapply(datalist, merge)
str(df)
df <- lapply(datalist, merge, all.x = TRUE)
head(df)
library(xts)
df <- merge.xts(datalist)
df <- merge.xts(stocklist)
?merge.xts
df <- lapply(datalist, merge.xts)
str(df)
df <- Reduce(rbind, datalist)
str(df)
lapply(datalist, merge.xts)
df <- lapply(datalist, merge.xts)
str(df)
df <- do.call(merge.xts, datalist)
str(df)
df <- lapply(datalist, do.call(merge.xts))
source('~/.active-rstudio-document', echo=TRUE)
str(df)
table(df$symbol)
summary(df)
df <- stocklist %>%
tq_get(get = "stock.prices") %>%
mutate(symbol = as.factor(symbol))
head(df)
table(df$symbol)
sumary(df)
head(df)
table(df$symbol)
summary(df)
library(ggplot2)
ggplot(df, aes(x = date, y = adjusted, color = symbol)) +
geom_point()
ggplot(df, aes(x = date, y = adjusted, color = symbol)) +
geom_point() +
facet_wrap(~ symbol)
totalPF <- df %>%
group_by(symbol) %>%
mutate(totalValue = adjusted * stockqty) %>%
ungroup()
data.frame(stocklist, stockqty)
library(quantmod)
library(xts)
library(tidyquant)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
stocksum <- data.frame(stocklist, stockqty)
# Total portfolio
totalPF <- df %>%
left_join(stocksum, by = c("symbol" = "stocklist"))
str(totalPF)
df %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalue = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalue)) %>%
head()
df %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalue = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalue)) %>%
tail()
# Total portfolio
totalPF <- df %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalueadj = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalueadj))
# Total portfolio
df %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalueadj = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalueadj)) %>%
ggplot(aes(date, stockvalueadj)) +
geom_point()
df %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalueadj = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalueadj)) %>%
ggplot(aes(date, dayvalue)) +
geom_point()
# Total portfolio
df %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalueadj = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalueadj)) %>%
ggplot(aes(date, dayvalue)) +
geom_point() +
stat_smooth()
library(quantmod)
library(xts)
library(tidyquant)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07")
stocksum <- data.frame(stocklist, stockqty, buydate)
stocksum
str(stocksum)
library(quantmod)
library(xts)
library(tidyquant)
library(lubridate)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- ymd(c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07"))
stocksum <- data.frame(stocklist, stockqty, buydate)
str(stocksum)
?tq_get
library(quantmod)
library(xts)
library(tidyquant)
library(lubridate)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- ymd(c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07"))
stocksum <- data.frame(stocklist, stockqty, buydate)
# Get stock prices for multiple stocks
df <- stocklist %>%
tq_get(get = "stock.prices",
from = stocksum$buydate) %>%
mutate(symbol = as.factor(symbol))
head(df)
library(ggplot2)
ggplot(df, aes(x = date, y = adjusted, color = symbol)) +
geom_point() +
facet_wrap(~ symbol)
ggplot(df, aes(x = date, y = adjusted, color = symbol)) +
geom_point()
library(purrr)
?map2_df
df <- map2_df(stocklist, buydate, tq_get, get = "stock.prices")
head(df)
df <- apply(stocklist, tq_get, get = "stock.prices", from = buydate)
df <- lapply(stocklist, tq_get, get = "stock.prices", from = buydate)
test <- tq_get("BX", get = "stock.prices",
from = stocksum$buydate[1])
head(test)
test <- tq_get("BX", get = "stock.prices",
from = stocksum$buydate[1]) %>%
mutate(symbol = as.factor("BX"))
head(test)
BX_monthly <- to.monthly(data_xts)
head(BX_monthly)
library(quantmod)
library(xts)
library(tidyquant)
library(lubridate)
library(purrr)
stocklist <- c("BX", "HCP", "JNJ", "KKR", "KMB", "O", "PFE", "QCP", "GE")
stockqty <- c(27, 21, 5, 41, 5, 11, 18, 4, 13)
buydate <- ymd(c("2015-02-02", "2015-02-02", "2014-10-24", "2015-02-02", "2014-10-24",
"2014-10-24", "2014-10-24", "2016-11-01", "2017-06-07"))
stocksum <- data.frame(stocklist, stockqty, buydate)
# Get stock prices for multiple stocks
data <- data.frame()
for (i in 1:length(stocklist)) {
d <- tq_get(stocklist[i],
get = "stock.prices",
from = buydate[i]) %>%
mutate(symbol = stocklist[i])
data <- bind_rows(data, d)
}
data <- data %>%
mutate(symbol = as.factor(symbol))
head(data)
tail(data)
table(data$symbol)
summary(data)
library(ggplot2)
ggplot(data, aes(x = date, y = adjusted, color = symbol)) +
geom_line() +
facet_wrap(~ symbol) +
stat_smooth(se = FALSE)
# Total portfolio
data %>%
left_join(stocksum, by = c("symbol" = "stocklist")) %>%
mutate(stockvalueadj = adjusted * stockqty) %>%
group_by(date) %>%
summarize(dayvalue = sum(stockvalueadj)) %>%
ggplot(aes(date, dayvalue)) +
geom_vline(xintercept = buydate, color = 'red') +
geom_line() +
stat_smooth(se = FALSE)
# Normalize data
data_norm <- data %>%
group_by(symbol) %>%
mutate(adj_scale = scale(adjusted)) %>%
ungroup()
head(data_norm)
tail(data_norm)
ggplot(data_norm, aes(x = date, y = adj_scale, color = symbol)) +
geom_line() +
facet_wrap(~ symbol) +
geom_hline(yintercept = 0) +
stat_smooth(method = 'lm', se = FALSE)
library(PerformanceAnalytics)
data_BX <- filter(data, symbol == "BX")
data_xts <- as.xts(data_BX[,-c(1, 8)], order.by = data_BX$date)
data_xts$Return <- Return.calculate(data_xts$adjusted)
plot.xts(data_xts)
head(data_xts)
str(data_xts)
BX_monthly <- to.monthly(data_xts)
head(BX_monthly)
head(data_xts)
BX_monthly <- to.monthly(data_xts)
head(BX_monthly)
# Create sp500_returns using Return.calculate using the closing prices
BX_returns <- Return.calculate(BX_monthly[,4])
# Time series plot
plot.zoo(BX_returns)
table.CalendarReturns(sp500_returns)
table.CalendarReturns(BX_returns)
# Compute the mean monthly returns
mean(BX_returns)
# Compute the geometric mean of monthly returns
mean.geometric(BX_returns)
# Compute the standard deviation
sd(BX_returns)
# Compute the mean monthly returns
mean(BX_returns, na.rm = TRUE)
# Compute the geometric mean of monthly returns
mean.geometric(BX_returns)
# Compute the standard deviation
sd(BX_returns, na.rm = TRUE)
# Compute the annualized mean
Return.annualized(BX_returns)
# Compute the annualized standard deviation
StdDev.annualized(BX_returns)
# Compute the annualized Sharpe ratio: ann_sharpe
ann_sharpe <- SharpeRatio.annualized(BX_returns, scale=12)
# Compute all of the above at once using table.AnnualizedReturns()
table.AnnualizedReturns(BX_returns)
# Calculate the mean, volatility, and sharpe ratio of sp500_returns
returns_ann <- Return.annualized(BX_returns)
sd_ann <- StdDev.annualized(BX_returns)
sharpe_ann <- SharpeRatio.annualized(BX_returns, scale = 12, Rf = rf)
# Plotting the 12-month rolling annualized mean
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "Return.annualized")
abline(h = returns_ann)
# Plotting the 12-month rolling annualized standard deviation
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "StdDev.annualized")
abline(h = sd_ann)
# Plotting the 12-month rolling annualized Sharpe ratio
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "SharpeRatio.annualized", Rf = rf)
abline(h = sharpe_ann)
str(BX_returns)
returns_ann <- Return.annualized(BX_returns)
Return.annualized(BX_returns)
Return.annualized(BX_returns, scale = 12)
# Compute the annualized mean
Return.annualized(BX_returns, scale = 12)
# Compute the annualized standard deviation
StdDev.annualized(BX_returns, scale = 12)
ann_sharpe <- SharpeRatio.annualized(BX_returns, scale=12)
table.AnnualizedReturns(BX_returns)
# Calculate the mean, volatility, and sharpe ratio of sp500_returns
returns_ann <- Return.annualized(BX_returns, scale = 12)
sd_ann <- StdDev.annualized(BX_returns, scale = 12)
sharpe_ann <- SharpeRatio.annualized(BX_returns, scale = 12)
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "Return.annualized")
abline(h = returns_ann)
# Plotting the 12-month rolling annualized mean
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "Return.annualized", scale = 12)
abline(h = returns_ann)
# Plotting the 12-month rolling annualized standard deviation
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "StdDev.annualized", scale = 12)
abline(h = sd_ann)
# Plotting the 12-month rolling annualized Sharpe ratio
chart.RollingPerformance(R = BX_returns, width = 12, FUN = "SharpeRatio.annualized")
abline(h = sharpe_ann)
charts.RollingPerformance(R = sp500_returns, width = 12
)
charts.RollingPerformance(R = BX_returns, width = 12)
charts.RollingPerformance(R = BX_returns, width = 12, scale = 12)
# calculate skewness and kurtosis
SkewnessKurtosisRatio(BX_returns)
skewness(BX_returns)
kurtosis(BX_returns)
chart.Histogram(BX_returns)
# Calculate the SemiDeviation
SemiDeviation(sp500_monthly)
# Calculate the value at risk
VaR(BX_monthly, p = 0.025)
VaR(BX_monthly, p = 0.05)
# Calculate the expected shortfall
ES(BX_monthly, p = 0.025)
ES(BX_monthly, p = 0.05)
# Calculate the SemiDeviation
SemiDeviation(BX_monthly)
# Calculate the value at risk
VaR(BX_monthly, p = 0.025)
VaR(BX_monthly, p = 0.05)
# Calculate the expected shortfall
ES(BX_monthly, p = 0.025)
ES(BX_monthly, p = 0.05)
head(BX_monthly)
head(BX_returns)
# Calculate the SemiDeviation
SemiDeviation(BX_returns)
# Calculate the value at risk
VaR(BX_returns, p = 0.025)
VaR(BX_returns, p = 0.05)
# Calculate the expected shortfall
ES(BX_returns, p = 0.025)
ES(BX_returns, p = 0.05)
# Table of drawdowns
table.Drawdowns(BX_returns)
# Plot of drawdowns
chart.Drawdown(BX_returns)
head(BX_returns)
BX_returns[-1, ]
head(BX_returns[-1, ])
table.Drawdowns(BX_returns[-1, ])
table.Drawdowns(BX_returns[-1, "data_xts.Close", drop = FALSE])
head(data_BX)
head(data_xts)
head(data_BX)
table.Drawdowns(data_xts$Return)
chart.Drawdown(data_xts$Return)
install.packages("tseries")
?rep
install.packages("PortfolioAnalytics")
library(quantmod)
getSymbols("FR0007051040")
getSymbols("FR0007051040")
getSymbols("FR0007051040.PA")
T <- getSymbols("FR0007051040.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
head(T)
tail(T)
autoplot.zoo(T$FR0010135103.PA.Adjusted)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
T <- getSymbols("FR0010135103.PA", auto.assign = FALSE)
autoplot.zoo(na.approx(T$FR0010135103.PA.Adjusted))
library(ggplot2)
?arrow
?geom_path
install.packages("forcat")
library(dplyr)
?row
?count
df <- read.csv("./dataset/consommation-quotidienne-brute-regionale.csv",
header = TRUE, sep = ";", na.strings=c(" ", ""))
# Date - Heure
# Date
# Heure
# Code INSEE région
# Région
# Consommation brute gaz (MW PCS 0°C) - GRTgaz
# Qualité donnée gaz - GRTgaz
# Consommation brute gaz (MW PCS 0°C) - TIGF
# Qualité donnée gaz - TIGF
# Consommation brute électricité (MW) - RTE
# Qualité donnée électricité - RTE
library(dplyr)
library(lubridate)
df_processed <- df %>%
select(-Date, -Heure)
df_processed$Date...Heure <- ymd_hms(df_processed$Date...Heure)
names(df_processed) <- c("Time", "Code", "Region",
"ConsoBrutGRT", "QA_GTR",
"ConsoBrutTIGF", "QA_TIGF",
"ConsoBrutElecRTE", "QA_RTE")
head(df_processed)
str(df_processed)
library(reshape2)
dfplot <-  melt(df_processed, id=c("Time", "Code", "Region"), na.rm = TRUE, value.name = "Measure")
library(ggplot2)
dfplot %>%
filter(Code == 75) %>%
ggplot(aes(Time, Measure, group = variable, color = Code)) +
geom_point()
setwd("C:/Users/pierr/Documents/GitHub/EDA_Portfolio/France Consommation quotidienne brute régionale 2013 - 2018")
df <- read.csv("./dataset/consommation-quotidienne-brute-regionale.csv",
header = TRUE, sep = ";", na.strings=c(" ", ""))
# Qualité donnée électricité - RTE
library(dplyr)
library(lubridate)
df_processed <- df %>%
select(-Date, -Heure)
df_processed$Date...Heure <- ymd_hms(df_processed$Date...Heure)
names(df_processed) <- c("Time", "Code", "Region",
"ConsoBrutGRT", "QA_GTR",
"ConsoBrutTIGF", "QA_TIGF",
"ConsoBrutElecRTE", "QA_RTE")
head(df_processed)
str(df_processed)
library(reshape2)
dfplot <-  melt(df_processed, id=c("Time", "Code", "Region"), na.rm = TRUE, value.name = "Measure")
library(ggplot2)
dfplot %>%
filter(Code == 75) %>%
ggplot(aes(Time, Measure, group = variable, color = Code)) +
geom_point()
dfplot %>%
filter(Code == 75) %>%
ggplot(aes(Time, Measure, color = variable)) +
geom_point()
head(dfplot)
tail(dfplot)
?melt
dfplot <-  melt(df_processed, id=c("Time", "Code", "Region",
"QA_GTR", "QA_TIGF", "QA_RTE"), value.name = "Measure")
library(ggplot2)
head(dfplot)
head(df_processed)
dfplot <-  melt(df_processed, id=c("Time", "Code", "Region",
"QA_GTR", "QA_TIGF", "QA_RTE"),
value.name = "Measure",
na.rm = TRUE)
head(dfplot)
dfplot %>%
ggplot(aes(Time, Measure, color = variable)) +
geom_point()
dfplot %>%
ggplot(aes(Time, Measure, color = variable)) +
geom_point() +
facet_grid(. ~ Region)
dfplot %>%
filter(variable == "ConsoBrutElecRTE") %>%
ggplot(aes(Time, Measure, color = variable)) +
geom_point() +
facet_grid(. ~ Region)
dfplot %>%
filter(variable == "ConsoBrutElecRTE") %>%
ggplot(aes(Time, Measure, color = QA_RTE)) +
geom_point() +
facet_grid(Region ~ .)
dfplot %>%
filter(Code == 75) %>%
ggplot(aes(Time, Measure)) +
geom_point(aes(shape = QA_RTE)) %>%
facet_grid(variable ~ .)
dfplot %>%
filter(Code == 75) %>%
ggplot(aes(Time, Measure)) +
geom_point(aes(shape = QA_RTE)) +
facet_grid(variable ~ .)
dfplot %>%
filter(Code == 75) %>%
ggplot(aes(Time, Measure)) +
geom_point(aes(color = QA_RTE)) +
facet_grid(variable ~ .)
dfplot %>%
filter(Code == 75) %>%
ggplot(aes(Time, Measure)) +
geom_line(aes(color = QA_RTE)) +
facet_grid(variable ~ .)
?pbinom
